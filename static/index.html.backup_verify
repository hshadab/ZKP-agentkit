<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>zkEngine - ZKP Agent Kit</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #0a0a0a;
            color: #e2e8f0;
            height: 100vh;
            display: flex;
            overflow: hidden;
        }
        
        /* Left sidebar */
        .sidebar {
            width: 320px;
            background: linear-gradient(180deg, #1a1a2e 0%, #0f0f23 100%);
            padding: 24px;
            overflow-y: auto;
            border-right: 1px solid rgba(139, 92, 246, 0.2);
            box-shadow: 4px 0 24px rgba(0, 0, 0, 0.5);
        }
        
        .sidebar h3 {
            background: linear-gradient(135deg, #a855f7 0%, #7c3aed 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 12px;
            text-transform: uppercase;
            font-size: 14px;
            letter-spacing: 0.1em;
            font-weight: 700;
        }
        
        .info-box {
            font-size: 11px;
            color: #94a3b8;
            margin-bottom: 24px;
            padding: 12px;
            background: rgba(139, 92, 246, 0.05);
            border: 1px solid rgba(139, 92, 246, 0.1);
            border-radius: 8px;
            line-height: 1.6;
        }
        
        .example-category {
            margin-bottom: 28px;
        }
        
        .example-category h4 {
            color: #a78bfa;
            font-size: 11px;
            margin-bottom: 12px;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            font-weight: 600;
        }
        
        .example-item {
            background: rgba(139, 92, 246, 0.05);
            border: 1px solid rgba(139, 92, 246, 0.1);
            padding: 14px 18px;
            margin-bottom: 8px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 14px;
            position: relative;
            overflow: hidden;
        }
        
        .example-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(139, 92, 246, 0.1), transparent);
            transition: left 0.5s;
        }
        
        .example-item:hover::before {
            left: 100%;
        }
        
        .example-item:hover {
            background: rgba(139, 92, 246, 0.1);
            border-color: rgba(139, 92, 246, 0.3);
            transform: translateX(4px);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.2);
        }
        
        .example-item strong {
            color: #c084fc;
            font-weight: 600;
        }
        
        /* Main container */
        .main-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #0a0a0a;
        }
        
        /* Header */
        .header {
            padding: 20px 32px;
            background: linear-gradient(180deg, #1a1a2e 0%, transparent 100%);
            border-bottom: 1px solid rgba(139, 92, 246, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
            backdrop-filter: blur(10px);
        }
        
        .header-left {
            display: flex;
            align-items: center;
            gap: 24px;
        }
        
        .header h1 {
            font-size: 26px;
            background: linear-gradient(135deg, #c084fc 0%, #7c3aed 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 700;
            letter-spacing: -0.5px;
        }
        
        .status {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.2);
            border-radius: 24px;
            font-size: 13px;
            font-weight: 500;
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            background-color: #10b981;
            border-radius: 50%;
            box-shadow: 0 0 8px rgba(16, 185, 129, 0.6);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.6; transform: scale(0.9); }
        }
        
        /* Messages area */
        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 32px;
            background: #0a0a0a;
        }
        
        #messages {
            max-width: 1000px;
            margin: 0 auto;
        }
        
        /* Message styles */
        .message {
            margin: 24px 0;
            display: flex;
            align-items: flex-start;
            gap: 12px;
            animation: fadeIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        @keyframes fadeIn {
            from { 
                opacity: 0; 
                transform: translateY(20px) scale(0.95); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }
        
        .message.user {
            flex-direction: row-reverse;
        }
        
        .message-content {
            max-width: 70%;
            padding: 16px 24px;
            border-radius: 20px;
            line-height: 1.6;
            font-size: 15px;
        }
        
        .message.user .message-content {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            border-bottom-right-radius: 4px;
            box-shadow: 0 8px 24px rgba(139, 92, 246, 0.3);
        }
        
        .message.assistant .message-content {
            background: rgba(30, 30, 46, 0.6);
            color: #e2e8f0;
            border: 1px solid rgba(139, 92, 246, 0.1);
            border-bottom-left-radius: 4px;
            backdrop-filter: blur(10px);
            white-space: pre-wrap;
        }
        
        /* Animated ellipses for loading messages */
        .loading-dots {
            display: flex;
            align-items: center;
            gap: 2px;
            color: #a78bfa;
            font-size: 14px;
            margin-top: 10px;
            padding-left: 48px;
        }
        
        .loading-dots::after {
            content: '';
            animation: dots 1.5s steps(4, end) infinite;
        }
        
        @keyframes dots {
            0%, 20% { content: ''; }
            40% { content: '.'; }
            60% { content: '..'; }
            80%, 100% { content: '...'; }
        }
        
        /* Proof Card - Ultra Slick Design */
        .proof-card {
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.8) 0%, rgba(20, 20, 36, 0.8) 100%);
            border: 1px solid rgba(139, 92, 246, 0.2);
            border-radius: 16px;
            padding: 24px;
            margin: 20px 0;
            max-width: 800px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(10px);
            animation: cardSlideIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        @keyframes cardSlideIn {
            from {
                opacity: 0;
                transform: translateY(30px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
        
        /* Animated gradient border */
        .proof-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #8b5cf6, #ec4899, #8b5cf6);
            background-size: 200% 100%;
            animation: gradientMove 3s linear infinite;
        }
        
        @keyframes gradientMove {
            0% { background-position: 0% 0; }
            100% { background-position: 200% 0; }
        }
        
        .proof-card.running {
            border-color: rgba(139, 92, 246, 0.4);
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(26, 17, 71, 0.9) 100%);
        }
        
        .proof-card.success {
            border-color: rgba(16, 185, 129, 0.4);
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(6, 78, 59, 0.9) 100%);
        }
        
        .proof-card.success::before {
            background: linear-gradient(90deg, #10b981, #34d399, #10b981);
        }
        
        .proof-card.failed {
            border-color: rgba(239, 68, 68, 0.4);
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(127, 29, 29, 0.9) 100%);
        }
        
        .proof-card.failed::before {
            background: linear-gradient(90deg, #ef4444, #f87171, #ef4444);
        }
        
        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        
        .card-title {
            font-size: 18px;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .card-title-text {
            background: linear-gradient(135deg, #c084fc 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .card-icon {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            border-radius: 12px;
            color: white;
            font-size: 18px;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }
        
        .card-badge {
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .badge-success {
            background: rgba(16, 185, 129, 0.15);
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
            box-shadow: 0 2px 8px rgba(16, 185, 129, 0.2);
        }
        
        .badge-processing {
            background: rgba(251, 191, 36, 0.15);
            color: #fbbf24;
            border: 1px solid rgba(251, 191, 36, 0.3);
            box-shadow: 0 2px 8px rgba(251, 191, 36, 0.2);
        }
        
        .badge-error {
            background: rgba(239, 68, 68, 0.15);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.2);
        }
        
        /* Metrics grid - now horizontal for completed proofs */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 16px;
            margin-bottom: 20px;
        }
        
        .metrics-row {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .metric-item {
            background: rgba(139, 92, 246, 0.05);
            border: 1px solid rgba(139, 92, 246, 0.1);
            padding: 16px;
            border-radius: 12px;
            transition: all 0.3s;
        }
        
        .metric-item-inline {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .metric-item:hover {
            background: rgba(139, 92, 246, 0.08);
            border-color: rgba(139, 92, 246, 0.2);
            transform: translateY(-2px);
        }
        
        .metric-label {
            color: #a78bfa;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            margin-bottom: 6px;
            font-weight: 600;
        }
        
        .metric-label-inline {
            color: #a78bfa;
            font-size: 13px;
            font-weight: 500;
        }
        
        .metric-value {
            color: #f3e8ff;
            font-size: 20px;
            font-weight: 700;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        }
        
        .metric-value-inline {
            color: #f3e8ff;
            font-size: 16px;
            font-weight: 600;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        }
        
        .metric-value.clickable, .metric-value-inline.clickable {
            cursor: pointer;
            text-decoration: underline;
            text-decoration-style: dotted;
            text-underline-offset: 2px;
        }
        
        .metric-value.clickable:hover, .metric-value-inline.clickable:hover {
            text-decoration-style: solid;
            color: #e9d5ff;
        }
        
        .metric-unit {
            color: #a78bfa;
            font-size: 13px;
            font-weight: 400;
            margin-left: 4px;
        }
        
        /* Progress section */
        .progress-section {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid rgba(139, 92, 246, 0.1);
        }
        
        .progress-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .progress-stage {
            font-size: 13px;
            color: #c084fc;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .progress-percentage {
            font-size: 13px;
            color: #a78bfa;
            font-weight: 600;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(139, 92, 246, 0.1);
            border-radius: 8px;
            overflow: hidden;
            position: relative;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #8b5cf6, #ec4899);
            border-radius: 8px;
            transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }
        
        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
        
        /* Stage messages */
        .stage-messages {
            margin-top: 16px;
            max-height: 120px;
            overflow-y: auto;
            padding: 12px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
            font-size: 12px;
            line-height: 1.6;
        }
        
        .stage-message {
            color: #a78bfa;
            margin: 4px 0;
            opacity: 0;
            animation: messageFadeIn 0.3s forwards;
        }
        
        @keyframes messageFadeIn {
            to { opacity: 1; }
        }
        
        /* Loading animation */
        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(139, 92, 246, 0.2);
            border-radius: 50%;
            border-top-color: #8b5cf6;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Technical details */
        .tech-details {
            margin-top: 16px;
            padding-top: 16px;
            border-top: 1px solid rgba(139, 92, 246, 0.1);
            display: flex;
            gap: 24px;
            font-size: 12px;
            color: #94a3b8;
        }
        
        .tech-item {
            display: flex;
            gap: 6px;
        }
        
        .tech-label {
            color: #6b7280;
        }
        
        .tech-value {
            color: #a78bfa;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        }
        
        /* Table Card Styles */
        .table-card {
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(20, 20, 36, 0.9) 100%);
            border: 1px solid rgba(139, 92, 246, 0.2);
            border-radius: 16px;
            margin: 20px 0;
            overflow: hidden;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            animation: cardSlideIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 24px;
            background: rgba(139, 92, 246, 0.1);
            border-bottom: 1px solid rgba(139, 92, 246, 0.2);
        }
        
        .table-title {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 18px;
            font-weight: 700;
        }
        
        .table-icon {
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            border-radius: 10px;
            font-size: 16px;
        }
        
        .table-title-text {
            background: linear-gradient(135deg, #c084fc 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .table-badge {
            padding: 6px 16px;
            background: rgba(139, 92, 246, 0.15);
            border: 1px solid rgba(139, 92, 246, 0.3);
            border-radius: 20px;
            font-size: 11px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            color: #c084fc;
        }
        
        .table-container {
            overflow-x: auto;
            padding: 0;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }
        
        .data-table thead {
            background: rgba(139, 92, 246, 0.05);
        }
        
        .data-table th {
            padding: 16px;
            text-align: left;
            font-weight: 600;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            color: #a78bfa;
            border-bottom: 2px solid rgba(139, 92, 246, 0.2);
        }
        
        .data-table tbody tr {
            border-bottom: 1px solid rgba(139, 92, 246, 0.1);
            transition: all 0.3s;
        }
        
        .data-table tbody tr:hover {
            background: rgba(139, 92, 246, 0.05);
        }
        
        .data-table td {
            padding: 16px;
            color: #e2e8f0;
        }
        
        /* Cell Styles */
        .proof-id-cell, .id-cell {
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        }
        
        .proof-id-text, .id-text {
            color: #c084fc;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .proof-id-text:hover, .id-text:hover {
            color: #e9d5ff;
            text-decoration: underline;
        }
        
        .function-cell {
            font-weight: 600;
            color: #f3e8ff;
        }
        
        .args-cell {
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
            color: #cbd5e1;
            font-size: 13px;
        }
        
        .time-cell, .size-cell {
            font-weight: 600;
            color: #a78bfa;
        }
        
        .status-badge {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }
        
        .status-complete, .status-valid {
            background: rgba(16, 185, 129, 0.15);
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }
        
        .status-failed, .status-invalid {
            background: rgba(239, 68, 68, 0.15);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }
        
        .date-cell {
            color: #94a3b8;
            font-size: 13px;
        }
        
        .actions-cell {
            text-align: center;
        }
        
        .action-btn {
            padding: 6px 16px;
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            border: none;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.4);
        }
        
        .action-disabled {
            color: #6b7280;
            font-size: 12px;
        }
        
        /* Verification Result Card */
        .verification-result-card {
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(20, 20, 36, 0.9) 100%);
            border: 1px solid rgba(139, 92, 246, 0.2);
            border-radius: 16px;
            padding: 24px;
            margin: 20px 0;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            animation: cardSlideIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .verification-result-card.valid {
            border-color: rgba(16, 185, 129, 0.4);
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(6, 78, 59, 0.5) 100%);
        }
        
        .verification-result-card.invalid {
            border-color: rgba(239, 68, 68, 0.4);
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(127, 29, 29, 0.5) 100%);
        }
        
        .result-header {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 24px;
        }
        
        .result-icon {
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 16px;
            font-size: 32px;
            font-weight: bold;
        }
        
        .result-icon.valid {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
            border: 2px solid rgba(16, 185, 129, 0.4);
        }
        
        .result-icon.invalid {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 2px solid rgba(239, 68, 68, 0.4);
        }
        
        .result-content h3 {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 4px;
            background: linear-gradient(135deg, #c084fc 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .result-content p {
            color: #94a3b8;
            font-size: 14px;
        }
        
        .result-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
        }
        
        .detail-item {
            background: rgba(139, 92, 246, 0.05);
            border: 1px solid rgba(139, 92, 246, 0.1);
            padding: 12px 16px;
            border-radius: 10px;
        }
        
        .detail-label {
            color: #a78bfa;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            display: block;
            margin-bottom: 4px;
        }
        
        .detail-value {
            color: #f3e8ff;
            font-size: 16px;
            font-weight: 600;
        }
        
        .detail-value.valid {
            color: #10b981;
        }
        
        .detail-value.invalid {
            color: #ef4444;
        }
        
        /* Copy Toast */
        .copy-toast {
            position: fixed;
            bottom: 60px;
            left: 50%;
            transform: translateX(-50%);
            background: #4a9eff;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 14px;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: 1000;
        }
        
        .copy-toast.show {
            opacity: 1;
        }
        
        /* Input area */
        .input-container {
            padding: 24px 32px;
            background: linear-gradient(180deg, transparent 0%, #1a1a2e 100%);
            border-top: 1px solid rgba(139, 92, 246, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .input-wrapper {
            max-width: 1000px;
            margin: 0 auto;
            display: flex;
            gap: 16px;
            align-items: center;
        }
        
        #user-input {
            flex: 1;
            padding: 18px 28px;
            background: rgba(30, 30, 46, 0.6);
            border: 2px solid rgba(139, 92, 246, 0.2);
            border-radius: 30px;
            color: #f3e8ff;
            font-size: 16px;
            outline: none;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
        }
        
        #user-input::placeholder {
            color: #6b7280;
        }
        
        #user-input:focus {
            border-color: rgba(139, 92, 246, 0.5);
            box-shadow: 0 0 0 4px rgba(139, 92, 246, 0.1);
            background: rgba(30, 30, 46, 0.8);
        }
        
        #send-button {
            padding: 18px 36px;
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            border: none;
            border-radius: 30px;
            font-size: 16px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 24px rgba(139, 92, 246, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        #send-button::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }
        
        #send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 32px rgba(139, 92, 246, 0.4);
        }
        
        #send-button:active {
            transform: translateY(0);
        }
        
        #send-button:active::before {
            width: 300px;
            height: 300px;
        }
        
        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 10px;
        }
        
        ::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(180deg, #8b5cf6, #7c3aed);
            border-radius: 10px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(180deg, #a78bfa, #8b5cf6);
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .sidebar {
                display: none;
            }
            
            .metrics-grid {
                grid-template-columns: 1fr 1fr;
            }
        }
        /* Animated ellipses */
        .loading-dots {
            display: inline-block;
            width: 20px;
            text-align: left;
        }
        .loading-dots::after {
            content: "...";
            animation: dots 1.5s steps(4, end) infinite;
        }
        @keyframes dots {
            0%, 20% { content: ""; }
            40% { content: "."; }
            60% { content: ".."; }
            80%, 100% { content: "..."; }
        }
        .thinking-message {
            color: #999;
            font-style: italic;
        }
        .verify-button {
            background: linear-gradient(135deg, #48bb78, #38a169);
            border: none;
            border-radius: 6px;
            padding: 8px 16px;
            color: white;
            font-weight: 500;
            cursor: pointer;
            margin-top: 8px;
            transition: transform 0.2s ease;
        }
        .verify-button:hover {
            transform: scale(1.05);
        }
        .verify-button:disabled {
            background: #666;
            cursor: not-allowed;
        }
        .verify-status {
            font-weight: 600;
        }
        .verify-status.verified {
            color: #48bb78;
        }
        .verify-status.unverified {
            color: #f56565;
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <h3>✨ ZKP Agent Kit</h3>
        <div class="info-box">
            Generate real cryptographic proofs using zkEngine. All metrics shown are actual values from proof generation - no simulations.
        </div>
        
        <div class="example-category">
            <h4>🔮 Generate Proofs</h4>
            <div class="example-item" onclick="sendExample('prove fibonacci of 20')">
                <strong>fibonacci</strong> - Recursive sequence
            </div>
            <div class="example-item" onclick="sendExample('prove add 15 and 27')">
                <strong>add</strong> - Addition operation
            </div>
            <div class="example-item" onclick="sendExample('prove multiply 8 by 7')">
                <strong>multiply</strong> - Multiplication
            </div>
            <div class="example-item" onclick="sendExample('prove factorial of 5')">
                <strong>factorial</strong> - Factorial computation
            </div>
            <div class="example-item" onclick="sendExample('prove max of 25 and 37')">
                <strong>max</strong> - Maximum value
            </div>
            <div class="example-item" onclick="sendExample('prove count until 10')">
                <strong>count_until</strong> - Counting sequence
            </div>
            <div class="example-item" onclick="sendExample('prove square of 9')">
                <strong>square</strong> - Square operation
            </div>
            <div class="example-item" onclick="sendExample('prove that 42 is even')">
                <strong>is_even</strong> - Parity check
            </div>
        </div>
        
        <div class="example-category">
            <h4>📊 Proof Management</h4>
            <div class="example-item" onclick="sendExample('list all proofs')">
                View all generated proofs
            </div>
            <div class="example-item" onclick="sendExample('list verifications')">
                View verification history
            </div>
            <div class="example-item" onclick="sendExample('verify')">
                Verify last proof
            </div>
            <div class="example-item" onclick="sendExample('status')">
                System status
            </div>
            <div class="example-item" onclick="sendExample('help')">
                Show commands
            </div>
        </div>
        
        <div class="example-category">
            <h4>🌍 Advanced Examples</h4>
            <div class="example-item" onclick="sendExample('give me a proof of fibonacci 5 and explain it in spanish')">
                Proof + Spanish explanation
            </div>
            <div class="example-item" onclick="sendExample('verify the last proof and connect it to market trends in verifiable compute')">
                Verify + Market analysis
            </div>
            <div class="example-item" onclick="sendExample('prove factorial of 7 and explain the mathematical significance')">
                Proof + Math insights
            </div>
        </div>
        
        <div class="example-category" style="margin-top: 40px; padding-top: 20px; border-top: 1px solid rgba(139, 92, 246, 0.1);">
            <h4 style="color: #c084fc;">⚡ Real-Time Metrics</h4>
            <div style="font-size: 12px; color: #a78bfa; line-height: 1.8; padding: 12px; background: rgba(139, 92, 246, 0.05); border-radius: 8px;">
                <ul style="margin-left: 16px; list-style: none;">
                    <li>🕐 <strong>Generation Time</strong>: Actual proving time</li>
                    <li>📦 <strong>Proof Size</strong>: Binary size in MB</li>
                    <li>🔢 <strong>Step Size</strong>: Computation steps</li>
                    <li>🔐 <strong>Hash</strong>: SHA256 fingerprint</li>
                    <li>✅ <strong>Verification</strong>: Real zkEngine verify</li>
                </ul>
            </div>
        </div>
    </div>
    
    <div class="main-container">
        <div class="header">
            <div class="header-left">
                <h1>🚀 zkEngine Agent Kit</h1>
                <div class="status">
                    <div class="status-dot" id="status-dot"></div>
                    <span id="connection-status">Connecting...</span>
                </div>
            </div>
        </div>
        
        <div class="messages-container">
            <div id="messages">
                <!-- No welcome message -->
            </div>
        </div>
        
        <div class="input-container">
            <div class="input-wrapper">
                <input type="text" id="user-input" placeholder="Ask me to prove a computation..." autofocus>
                <button id="send-button" onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>
    
    <script>
        let ws = null;
        let reconnectInterval = null;
        let proofStates = {};
        let progressIntervals = {};
        let activeLoadingMessages = new Set();
        let activeProofCards = new Set();
        let waitingForProof = false;
        
        function connect() {
            ws = new WebSocket('ws://localhost:8001/ws');
            
            ws.onopen = () => {
                console.log('Connected to zkEngine');
                document.getElementById('connection-status').textContent = 'Connected';
                document.getElementById('status-dot').style.backgroundColor = '#10b981';
                if (reconnectInterval) {
                    clearInterval(reconnectInterval);
                    reconnectInterval = null;
                }
            };
            
            ws.onmessage = (event) => {
                console.log('Received:', event.data);
                try {
                    const data = JSON.parse(event.data);
                    handleMessage(data);
                } catch (e) {
                    console.error('Failed to parse message:', e);
                }
            };
            
            ws.onclose = () => {
                console.log('Disconnected from zkEngine');
                document.getElementById('connection-status').textContent = 'Disconnected';
                document.getElementById('status-dot').style.backgroundColor = '#ef4444';
                
                if (!reconnectInterval) {
                    reconnectInterval = setInterval(() => {
                        console.log('Attempting to reconnect...');
                        connect();
                    }, 3000);
                }
            };
            
            ws.onerror = (error) => {
                console.error('WebSocket error:', error);
            };
        }
        
        function handleMessage(data) {
            const msgType = data.type || data.msg_type;
            
            // Remove loading dots when we receive a response
            removeLoadingDots();
            
            // Handle structured data types
            if (data.data) {
                const dataType = data.data.type;
                
                if (dataType === 'proof_list') {
                    displayProofTable(data.data);
                    return; // Don't show empty message
                } else if (dataType === 'verification_list') {
                    displayVerificationTable(data.data);
                    return; // Don't show empty message
                } else if (dataType === 'verification_complete') {
                    displayVerificationResult(data.data);
                    waitingForProof = false;
                }
            }
            
            // Always handle regular messages
            if (msgType === 'message' && data.content) {
                // Check if this is a proof-related message
                if (data.content.includes('Starting proof generation') && data.data && data.data.proof_id) {
                    createProofCard(data.data.proof_id, 'running', data.content);
                    activeProofCards.add(data.data.proof_id);
                    waitingForProof = false;
                } else if (data.content.includes('Proof generated successfully') || 
                          data.content.includes('✅')) {
                    // Extract proof ID from content
                    const idMatch = data.content.match(/ID:\s*([a-f0-9-]+)/);
                    if (idMatch) {
                        const proofId = idMatch[1];
                        // Look for full proof ID in our states
                        const fullId = Object.keys(proofStates).find(id => id.startsWith(proofId));
                        if (fullId) {
                            updateProofCard(fullId, 'success', data.content);
                            activeProofCards.delete(fullId);
                        }
                    }
                    waitingForProof = false;
                    // Still show the message
                    addMessage(data.content, 'assistant');
                } else if (data.content.includes('Proof generation failed') || 
                          data.content.includes('❌')) {
                    // Extract proof ID from content
                    const idMatch = data.content.match(/([a-f0-9-]+)/);
                    if (idMatch) {
                        const proofId = idMatch[1];
                        const fullId = Object.keys(proofStates).find(id => id.startsWith(proofId));
                        if (fullId) {
                            updateProofCard(fullId, 'failed', data.content);
                            activeProofCards.delete(fullId);
                        }
                    }
                    waitingForProof = false;
                    addMessage(data.content, 'assistant');
                } else {
                    // Regular message
                    addMessage(data.content, 'assistant');
                    
                    // Check if we should be waiting for a proof or verification
                    if (data.content.toLowerCase().includes('generating proof') || 
                        data.content.toLowerCase().includes('processing proof') ||
                        data.content.toLowerCase().includes('i\'ll verify') ||
                        data.content.toLowerCase().includes('verifying')) {
                        waitingForProof = true;
                        showLoadingDots();
                    }
                }
            }
            
            // Handle specific proof message types
            if (msgType === 'proof_update') {
                if (data.data && data.data.proof_id) {
                    updateProofCard(data.data.proof_id, 'running', data.content);
                }
                waitingForProof = false;
            } else if (msgType === 'proof_complete') {
                if (data.data && data.data.proof_id) {
                    updateProofCard(data.data.proof_id, 'success', data.content, data.data);
                    activeProofCards.delete(data.data.proof_id);
                }
                waitingForProof = false;
            } else if (msgType === 'proof_failed') {
                if (data.data && data.data.proof_id) {
                    updateProofCard(data.data.proof_id, 'failed', data.content);
                    activeProofCards.delete(data.data.proof_id);
                }
                waitingForProof = false;
            }
        }
        
        function addMessage(content, sender) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.textContent = content;
            
            messageDiv.appendChild(contentDiv);
            messagesDiv.appendChild(messageDiv);
            
            // Scroll to bottom
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function showLoadingDots() {
            if (!waitingForProof) return;
            
            const messagesDiv = document.getElementById('messages');
            const existingDots = document.querySelector('.loading-dots');
            
            if (!existingDots) {
                const dotsDiv = document.createElement('div');
                dotsDiv.className = 'loading-dots';
                dotsDiv.innerHTML = 'Processing proof<span></span>';
                messagesDiv.appendChild(dotsDiv);
                
                // Scroll to bottom
                messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
            }
        }
        
        function removeLoadingDots() {
            const dots = document.querySelector('.loading-dots');
            if (dots) {
                dots.remove();
            }
            waitingForProof = false;
        }
        
        function parseProofInfo(content) {
            const info = {
                function: 'unknown',
                args: '[]',
                stepSize: '50',
                wasmFile: 'unknown.wat',
                time: null,
                size: null
            };
            
            // Parse function
            const funcMatch = content.match(/Function:\s*(\w+)/);
            if (funcMatch) info.function = funcMatch[1];
            
            // Parse arguments
            const argsMatch = content.match(/Arguments:\s*\[(.*?)\]/);
            if (argsMatch) info.args = argsMatch[1];
            
            // Parse WASM file
            const wasmMatch = content.match(/WASM:\s*(\S+\.wat)/);
            if (wasmMatch) info.wasmFile = wasmMatch[1];
            
            // Parse steps
            const stepsMatch = content.match(/Steps:\s*(\d+)/);
            if (stepsMatch) info.stepSize = stepsMatch[1];
            
            // Parse time
            const timeMatch = content.match(/Time:\s*([\d.]+)s/);
            if (timeMatch) info.time = parseFloat(timeMatch[1]);
            
            // Parse size
            const sizeMatch = content.match(/Size:\s*([\d.]+)MB/);
            if (sizeMatch) info.size = parseFloat(sizeMatch[1]);
            
            return info;
        }
        
        function createProofCard(proofId, status, content) {
            const messagesDiv = document.getElementById('messages');
            const info = parseProofInfo(content);
            
            // Store proof state
            proofStates[proofId] = { 
                status, 
                info, 
                startTime: Date.now(),
                progress: 0
            };
            
            const cardDiv = document.createElement('div');
            cardDiv.className = `proof-card ${status}`;
            cardDiv.id = `proof-${proofId}`;
            
            const proofIdShort = proofId.substring(0, 8);
            
            cardDiv.innerHTML = `
                <div class="card-header">
                    <div class="card-title">
                        <div class="card-icon">
                            ${status === 'running' ? '<div class="loading-spinner"></div>' : '✓'}
                        </div>
                        <span class="card-title-text">Proof Generation</span>
                    </div>
                    <div class="card-badge badge-processing">
                        <div class="loading-spinner" style="width: 12px; height: 12px; border-width: 2px;"></div>
                        GENERATING
                    </div>
                </div>
                
                <div class="metrics-grid">
                    <div class="metric-item">
                        <div class="metric-label">Proof ID</div>
                        <div class="metric-value" style="font-size: 16px;">${proofIdShort}</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-label">Function</div>
                        <div class="metric-value" style="font-size: 16px;">${info.function}<span class="metric-unit">(${info.args})</span></div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-label">Step Size</div>
                        <div class="metric-value">${formatNumber(info.stepSize)}</div>
                    </div>
                    <div class="metric-item">
                        <div class="metric-label">Elapsed</div>
                        <div class="metric-value" id="elapsed-${proofId}">0<span class="metric-unit">s</span></div>
                    </div>
                </div>
                
                <div class="progress-section">
                    <div class="progress-header">
                        <div class="progress-stage" id="stage-${proofId}">
                            <div class="loading-spinner" style="width: 14px; height: 14px; border-width: 2px;"></div>
                            Initializing proof system...
                        </div>
                        <div class="progress-percentage" id="percent-${proofId}">0%</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-${proofId}" style="width: 0%"></div>
                    </div>
                    <div class="stage-messages" id="messages-${proofId}">
                        <div class="stage-message">► Starting zkEngine...</div>
                    </div>
                </div>
                
                <div class="tech-details">
                    <div class="tech-item">
                        <span class="tech-label">WASM:</span>
                        <span class="tech-value">${info.wasmFile}</span>
                    </div>
                    <div class="tech-item">
                        <span class="tech-label">Proof System:</span>
                        <span class="tech-value">Nova IVC</span>
                    </div>
                    <div class="tech-item">
                        <span class="tech-label">Status:</span>
                        <span class="tech-value" id="status-${proofId}">Generating</span>
                    </div>
                </div>
            `;
            
            messagesDiv.appendChild(cardDiv);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
            
            // Start progress simulation
            if (status === 'running') {
                startProgressSimulation(proofId);
            }
        }
        
        function updateProofCard(proofId, status, content, metrics) {
            const card = document.getElementById(`proof-${proofId}`);
            if (!card) {
                createProofCard(proofId, status, content);
                return;
            }
            
            const info = parseProofInfo(content);
            const proofIdShort = proofId.substring(0, 8);
            
            // Update stored state
            if (proofStates[proofId]) {
                proofStates[proofId].status = status;
                proofStates[proofId].info = { ...proofStates[proofId].info, ...info };
                if (metrics) {
                    proofStates[proofId].metrics = metrics;
                }
            }
            
            // Stop progress simulation if complete
            if (status !== 'running' && progressIntervals[proofId]) {
                clearInterval(progressIntervals[proofId]);
                delete progressIntervals[proofId];
            }
            
            card.className = `proof-card ${status}`;
            
            const badgeClass = status === 'running' ? 'badge-processing' : 
                             status === 'success' ? 'badge-success' : 'badge-error';
            const badgeText = status === 'running' ? 'GENERATING' : 
                            status === 'success' ? 'COMPLETE' : 'FAILED';
            const iconHtml = status === 'running' ? '<div class="loading-spinner"></div>' : 
                           status === 'success' ? '✓' : '✗';
            
            // Update header
            const header = card.querySelector('.card-header');
            header.innerHTML = `
                <div class="card-title">
                    <div class="card-icon">${iconHtml}</div>
                    <span class="card-title-text">Proof ${status === 'success' ? 'Generated' : status === 'failed' ? 'Failed' : 'Generation'}</span>
                </div>
                <div class="card-badge ${badgeClass}">
                    ${status === 'running' ? '<div class="loading-spinner" style="width: 12px; height: 12px; border-width: 2px;"></div>' : ''}
                    ${badgeText}
                </div>
            `;
            
            // Update metrics for completed proofs - single horizontal row
            if (status === 'success' && info.time && info.size) {
                const metricsGrid = card.querySelector('.metrics-grid');
                metricsGrid.className = 'metrics-row';
                metricsGrid.innerHTML = `
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Proof ID:</span>
                        <span class="metric-value-inline clickable" onclick="copyToClipboard('${proofId}')" title="Click to copy">${proofIdShort}</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Function:</span>
                        <span class="metric-value-inline">${info.function}(${info.args})</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Time:</span>
                        <span class="metric-value-inline">${info.time.toFixed(1)}s</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Size:</span>
                        <span class="metric-value-inline">${info.size.toFixed(1)}MB</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Step Size:</span>
                        <span class="metric-value-inline">${formatNumber(info.stepSize)}</span>
                    </div>
                `;
                
                // Remove progress section for completed proofs
                const progressSection = card.querySelector('.progress-section');
                if (progressSection) {
                    progressSection.remove();
                }
            }
            
            // Update status in tech details
            const statusEl = card.querySelector(`#status-${proofId}`);
            if (statusEl) {
                statusEl.textContent = status === 'success' ? 'Complete' : 
                                     status === 'failed' ? 'Failed' : 'Generating';
                statusEl.style.color = status === 'success' ? '#10b981' : 
                                     status === 'failed' ? '#ef4444' : '#fbbf24';
            }
        }
        
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                // Show toast
                const toast = document.createElement('div');
                toast.className = 'copy-toast show';
                toast.textContent = 'Proof ID copied to clipboard!';
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 2000);
            });
        }
        
        function startProgressSimulation(proofId) {
            const stages = [
                { progress: 10, stage: "Loading WASM module...", message: "► Parsing WAT file..." },
                { progress: 20, stage: "Initializing proof system...", message: "► Setting up Nova IVC..." },
                { progress: 30, stage: "Compiling circuit...", message: "► Building constraint system..." },
                { progress: 40, stage: "Executing computation...", message: "► Running WASM function..." },
                { progress: 50, stage: "Generating witness...", message: "► Computing intermediate values..." },
                { progress: 60, stage: "Creating proof...", message: "► Folding proof steps..." },
                { progress: 70, stage: "Applying constraints...", message: "► Verifying R1CS constraints..." },
                { progress: 80, stage: "Finalizing proof...", message: "► Compressing proof data..." },
                { progress: 90, stage: "Writing to disk...", message: "► Saving proof binary..." }
            ];
            
            let stageIndex = 0;
            let elapsed = 0;
            
            progressIntervals[proofId] = setInterval(() => {
                if (!proofStates[proofId] || proofStates[proofId].status !== 'running') {
                    clearInterval(progressIntervals[proofId]);
                    delete progressIntervals[proofId];
                    return;
                }
                
                elapsed += 0.1;
                
                // Update elapsed time
                const elapsedEl = document.getElementById(`elapsed-${proofId}`);
                if (elapsedEl) {
                    elapsedEl.innerHTML = `${elapsed.toFixed(1)}<span class="metric-unit">s</span>`;
                }
                
                // Progress through stages
                if (stageIndex < stages.length && Math.random() > 0.7) {
                    const stage = stages[stageIndex];
                    
                    // Update progress bar
                    const progressBar = document.getElementById(`progress-${proofId}`);
                    if (progressBar) {
                        progressBar.style.width = `${stage.progress}%`;
                    }
                    
                    // Update percentage
                    const percentEl = document.getElementById(`percent-${proofId}`);
                    if (percentEl) {
                        percentEl.textContent = `${stage.progress}%`;
                    }
                    
                    // Update stage
                    const stageEl = document.getElementById(`stage-${proofId}`);
                    if (stageEl) {
                        stageEl.innerHTML = `<div class="loading-spinner" style="width: 14px; height: 14px; border-width: 2px;"></div> ${stage.stage}`;
                    }
                    
                    // Add stage message
                    const messagesEl = document.getElementById(`messages-${proofId}`);
                    if (messagesEl) {
                        const msgDiv = document.createElement('div');
                        msgDiv.className = 'stage-message';
                        msgDiv.textContent = stage.message;
                        messagesEl.appendChild(msgDiv);
                        messagesEl.scrollTop = messagesEl.scrollHeight;
                    }
                    
                    stageIndex++;
                }
            }, 100);
        }
        
        function displayProofTable(data) {
            const messagesDiv = document.getElementById('messages');
            const tableCard = document.createElement('div');
            tableCard.className = 'table-card';
            
            const proofs = data.proofs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            tableCard.innerHTML = `
                <div class="table-header">
                    <div class="table-title">
                        <div class="table-icon">📋</div>
                        <span class="table-title-text">Generated Proofs</span>
                    </div>
                    <div class="table-badge">${proofs.length} PROOFS</div>
                </div>
                
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Proof ID</th>
                                <th>Function</th>
                                <th>Arguments</th>
                                <th>Time</th>
                                <th>Size</th>
                                <th>Status</th>
                                <th>Generated</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${proofs.map(proof => `
                                <tr>
                                    <td class="proof-id-cell">
                                        <span class="proof-id-text" onclick="copyToClipboard('${proof.id}')" title="${proof.id} - Click to copy">${proof.id.substring(0, 8)}</span>
                                    </td>
                                    <td class="function-cell">${proof.metadata.function}</td>
                                    <td class="args-cell">[${proof.metadata.arguments.join(', ')}]</td>
                                    <td class="time-cell">${proof.metrics.generation_time_secs.toFixed(1)}s</td>
                                    <td class="size-cell">${proof.metrics.file_size_mb.toFixed(1)} MB</td>
                                    <td class="status-cell">
                                        <span class="status-badge ${proof.status === 'complete' ? 'status-complete' : 'status-failed'}">
                                            ${proof.status === 'complete' ? '✓ Complete' : '✗ Failed'}
                                        </span>
                                    </td>
                                    <td class="date-cell">${formatDate(proof.timestamp)}</td>
                                    <td class="actions-cell">
                                        ${proof.status === 'complete' ? 
                                            `<button class="action-btn verify-btn" onclick="sendMessage('verify ${proof.id.substring(0, 8)}')">
                                                Verify
                                            </button>` : 
                                            '<span class="action-disabled">N/A</span>'
                                        }
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
            
            messagesDiv.appendChild(tableCard);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function displayVerificationTable(data) {
            const messagesDiv = document.getElementById('messages');
            const tableCard = document.createElement('div');
            tableCard.className = 'table-card';
            
            const verifications = data.verifications.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            tableCard.innerHTML = `
                <div class="table-header">
                    <div class="table-title">
                        <div class="table-icon">✓</div>
                        <span class="table-title-text">Verification History</span>
                    </div>
                    <div class="table-badge">${verifications.length} VERIFICATIONS</div>
                </div>
                
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Verification ID</th>
                                <th>Proof ID</th>
                                <th>Result</th>
                                <th>Verification Time</th>
                                <th>Timestamp</th>
                                <th>Error</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${verifications.map(ver => `
                                <tr>
                                    <td class="id-cell">
                                        <span class="id-text" title="${ver.id}">${ver.id.substring(0, 8)}</span>
                                    </td>
                                    <td class="proof-id-cell">
                                        <span class="proof-id-text" title="${ver.proof_id}">${ver.proof_id.substring(0, 8)}</span>
                                    </td>
                                    <td class="result-cell">
                                        <span class="status-badge ${ver.is_valid ? 'status-valid' : 'status-invalid'}">
                                            ${ver.is_valid ? '✓ Valid' : '✗ Invalid'}
                                        </span>
                                    </td>
                                    <td class="time-cell">${ver.verification_time_secs.toFixed(3)}s</td>
                                    <td class="date-cell">${formatDate(ver.timestamp)}</td>
                                    <td class="error-cell">${ver.error || '-'}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
            
            messagesDiv.appendChild(tableCard);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function displayVerificationResult(data) {
            const messagesDiv = document.getElementById('messages');
            const resultCard = document.createElement('div');
            resultCard.className = `verification-result-card ${data.verification.is_valid ? 'valid' : 'invalid'}`;
            
            resultCard.innerHTML = `
                <div class="result-header">
                    <div class="result-icon ${data.verification.is_valid ? 'valid' : 'invalid'}">
                        ${data.verification.is_valid ? '✓' : '✗'}
                    </div>
                    <div class="result-content">
                        <h3>Verification ${data.verification.is_valid ? 'Successful' : 'Failed'}</h3>
                        <p>Proof ${data.proof.id.substring(0, 8)} has been verified</p>
                    </div>
                </div>
                
                <div class="result-details">
                    <div class="detail-item">
                        <span class="detail-label">Function:</span>
                        <span class="detail-value">${data.proof.metadata.function}(${data.proof.metadata.arguments.join(', ')})</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Verification Time:</span>
                        <span class="detail-value">${data.verification.verification_time_secs.toFixed(3)}s</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Proof Size:</span>
                        <span class="detail-value">${data.proof.metrics.file_size_mb.toFixed(1)} MB</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Result:</span>
                        <span class="detail-value ${data.verification.is_valid ? 'valid' : 'invalid'}">
                            ${data.verification.is_valid ? 'VALID PROOF' : 'INVALID PROOF'}
                        </span>
                    </div>
                </div>
            `;
            
            messagesDiv.appendChild(resultCard);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function formatDate(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleString('en-US', {
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }
        
        function formatNumber(num) {
            return parseInt(num).toLocaleString();
        }
        
        function sendMessage(text) {
            const input = document.getElementById('user-input');
            const message = text || input.value.trim();
            
            if (message && ws && ws.readyState === WebSocket.OPEN) {
                addMessage(message, 'user');
                
                addMessage("assistant", "<span class="thinking-message">Thinking<span class="loading-dots"></span></span>");
            ws.send(JSON.stringify({ message }));
                
                if (!text) {
                    input.value = '';
                }
            }
        }
        
        function sendExample(text) {
            document.getElementById('user-input').value = text;
            sendMessage(text);
        }
        
        // Event listeners
        document.getElementById('user-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // Connect on load
        connect();
    </script>
</body>
</html>
