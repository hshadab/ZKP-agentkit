<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>zkEngine - ZKP Agent Kit</title>
    
    <!-- Prism.js for syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #0a0a0a;
            color: #e2e8f0;
            height: 100vh;
            display: flex;
            overflow: hidden;
        }
        
        /* Left sidebar */
        .sidebar {
            width: 320px;
            background: linear-gradient(180deg, #1a1a2e 0%, #0f0f23 100%);
            padding: 24px;
            overflow-y: auto;
            border-right: 1px solid rgba(139, 92, 246, 0.2);
            box-shadow: 4px 0 24px rgba(0, 0, 0, 0.5);
        }
        
        .sidebar h3 {
            background: linear-gradient(135deg, #a855f7 0%, #7c3aed 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 12px;
            text-transform: uppercase;
            font-size: 14px;
            letter-spacing: 0.1em;
            font-weight: 700;
        }
        
        .info-box {
            font-size: 11px;
            color: #94a3b8;
            margin-bottom: 24px;
            padding: 12px;
            background: rgba(139, 92, 246, 0.05);
            border: 1px solid rgba(139, 92, 246, 0.1);
            border-radius: 8px;
            line-height: 1.6;
        }
        
        .example-category {
            margin-bottom: 28px;
        }
        
        .example-category h4 {
            color: #a78bfa;
            font-size: 11px;
            margin-bottom: 12px;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            font-weight: 600;
        }
        
        .example-item {
            background: rgba(139, 92, 246, 0.05);
            border: 1px solid rgba(139, 92, 246, 0.1);
            padding: 14px 18px;
            margin-bottom: 8px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 14px;
            position: relative;
            overflow: hidden;
        }
        
        .example-item:hover {
            background: rgba(139, 92, 246, 0.1);
            border-color: rgba(139, 92, 246, 0.3);
            transform: translateX(4px);
        }
        
        .example-item strong {
            color: #c084fc;
            font-weight: 600;
        }
        
        /* Main container */
        .main-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #0a0a0a;
        }
        
        /* Header */
        .header {
            padding: 20px 32px;
            background: linear-gradient(180deg, #1a1a2e 0%, transparent 100%);
            border-bottom: 1px solid rgba(139, 92, 246, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
            backdrop-filter: blur(10px);
        }
        
        .header h1 {
            font-size: 26px;
            background: linear-gradient(135deg, #c084fc 0%, #7c3aed 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 700;
            letter-spacing: -0.5px;
        }
        
        .status {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.2);
            border-radius: 24px;
            font-size: 13px;
            font-weight: 500;
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            background-color: #10b981;
            border-radius: 50%;
            box-shadow: 0 0 8px rgba(16, 185, 129, 0.6);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.6; transform: scale(0.9); }
        }
        
        /* Messages area */
        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 32px;
            background: #0a0a0a;
        }
        
        #messages {
            max-width: 1000px;
            margin: 0 auto;
        }
        
        /* Message styles */
        .message {
            margin: 24px 0;
            display: flex;
            align-items: flex-start;
            gap: 12px;
            animation: fadeIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        @keyframes fadeIn {
            from { 
                opacity: 0; 
                transform: translateY(20px) scale(0.95); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }
        
        .message.user {
            flex-direction: row-reverse;
        }
        
        .message-content {
            max-width: 70%;
            padding: 16px 24px;
            border-radius: 20px;
            line-height: 1.6;
            font-size: 15px;
        }
        
        .message.user .message-content {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            border-bottom-right-radius: 4px;
            box-shadow: 0 8px 24px rgba(139, 92, 246, 0.3);
        }
        
        .message.assistant .message-content {
            background: rgba(30, 30, 46, 0.6);
            color: #e2e8f0;
            border: 1px solid rgba(139, 92, 246, 0.1);
            border-bottom-left-radius: 4px;
            backdrop-filter: blur(10px);
            white-space: pre-wrap;
        }
        
        /* Thinking animation */
        .thinking-animation {
            display: flex;
            align-items: center;
            gap: 8px;
            margin: 20px 0;
            padding: 16px 24px;
            background: rgba(30, 30, 46, 0.6);
            border: 1px solid rgba(139, 92, 246, 0.1);
            border-radius: 20px;
            border-bottom-left-radius: 4px;
            backdrop-filter: blur(10px);
            max-width: 70%;
        }
        
        .thinking-dots {
            display: flex;
            gap: 3px;
        }
        
        .thinking-dots .dot {
            width: 6px;
            height: 6px;
            background-color: #a78bfa;
            border-radius: 50%;
            animation: thinkingBounce 1.2s ease-in-out infinite;
        }
        
        .thinking-dots .dot:nth-child(1) { animation-delay: 0s; }
        .thinking-dots .dot:nth-child(2) { animation-delay: 0.2s; }
        .thinking-dots .dot:nth-child(3) { animation-delay: 0.4s; }
        
        @keyframes thinkingBounce {
            0%, 60%, 100% {
                transform: translateY(0);
                opacity: 0.4;
            }
            30% {
                transform: translateY(-8px);
                opacity: 1;
            }
        }
        
        /* Loading animation */
        .loading-card {
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.8) 0%, rgba(20, 20, 36, 0.8) 100%);
            border: 1px solid rgba(139, 92, 246, 0.2);
            border-radius: 16px;
            padding: 24px;
            margin: 20px 0;
            max-width: 800px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(10px);
            animation: cardSlideIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .loading-content {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .loading-spinner {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            border-radius: 12px;
            animation: spin 2s linear infinite;
        }

        .loading-text {
            font-size: 16px;
            color: #a78bfa;
            font-weight: 600;
        }

        .loading-ellipses {
            display: inline-block;
            width: 30px;
            text-align: left;
        }

        .loading-ellipses::after {
            content: '';
            animation: ellipses 1.5s infinite;
        }

        @keyframes ellipses {
            0% { content: ''; }
            25% { content: '.'; }
            50% { content: '..'; }
            75% { content: '...'; }
            100% { content: ''; }
        }

        /* Code display modal */
        .code-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            padding: 40px;
        }

        .code-modal-content {
            background: linear-gradient(135deg, #1a1a2e 0%, #0f0f23 100%);
            border: 2px solid rgba(139, 92, 246, 0.3);
            border-radius: 16px;
            padding: 30px;
            max-width: 900px;
            max-height: 80vh;
            width: 100%;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .code-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .code-modal-title {
            font-size: 20px;
            font-weight: 700;
            background: linear-gradient(135deg, #c084fc 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .code-display {
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(139, 92, 246, 0.2);
            border-radius: 12px;
            padding: 20px;
            overflow-y: auto;
            flex: 1;
            font-family: 'SF Mono', 'Monaco', monospace;
            font-size: 14px;
            line-height: 1.6;
        }

        .code-display pre {
            margin: 0;
            color: #e2e8f0;
        }

        .code-info {
            margin-bottom: 15px;
            color: #94a3b8;
            font-size: 14px;
            line-height: 1.5;
        }

        .code-info strong {
            color: #c084fc;
        }
        
        /* Proof Card */
        .proof-card {
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.8) 0%, rgba(20, 20, 36, 0.8) 100%);
            border: 1px solid rgba(139, 92, 246, 0.2);
            border-radius: 16px;
            padding: 24px;
            margin: 20px 0;
            max-width: 800px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(10px);
            animation: cardSlideIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        @keyframes cardSlideIn {
            from {
                opacity: 0;
                transform: translateY(30px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
        
        .proof-card.running {
            border-color: rgba(139, 92, 246, 0.4);
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(26, 17, 71, 0.9) 100%);
        }
        
        .proof-card.success {
            border-color: rgba(16, 185, 129, 0.4);
            background: linear-gradient(135deg, rgba(30, 30, 46, 0.9) 0%, rgba(6, 78, 59, 0.9) 100%);
        }
        
        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        
        .card-title {
            font-size: 18px;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .card-title-text {
            background: linear-gradient(135deg, #c084fc 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .card-icon {
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            border-radius: 12px;
            color: white;
            font-size: 18px;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }
        
        .card-icon.spinning {
            animation: spin 2s linear infinite;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .card-badge {
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.1em;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .badge-success {
            background: rgba(16, 185, 129, 0.15);
            color: #10b981;
            border: 1px solid rgba(16, 185, 129, 0.3);
        }
        
        .badge-processing {
            background: rgba(251, 191, 36, 0.15);
            color: #fbbf24;
            border: 1px solid rgba(251, 191, 36, 0.3);
            animation: pulse 2s infinite;
        }
        
        .metrics-row {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            align-items: center;
            margin-bottom: 16px;
        }
        
        .metric-item-inline {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .metric-label-inline {
            color: #a78bfa;
            font-size: 13px;
            font-weight: 500;
        }
        
        .metric-value-inline {
            color: #f3e8ff;
            font-size: 16px;
            font-weight: 600;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        }
        
        .card-actions {
            display: flex;
            gap: 12px;
            margin-top: 16px;
            padding-top: 16px;
            border-top: 1px solid rgba(139, 92, 246, 0.1);
        }
        
        .action-btn {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .action-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }
        
        .action-btn.secondary {
            background: rgba(139, 92, 246, 0.15);
            border: 1px solid rgba(139, 92, 246, 0.3);
            color: #a78bfa;
        }
        
        /* Data Tables */
        .data-table {
            background: rgba(30, 30, 46, 0.8);
            border: 1px solid rgba(139, 92, 246, 0.2);
            border-radius: 16px;
            padding: 24px;
            margin: 20px 0;
            max-width: 900px;
            overflow-x: auto;
            backdrop-filter: blur(10px);
            animation: cardSlideIn 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .table-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 20px;
        }
        
        .table-title {
            font-size: 18px;
            font-weight: 700;
            background: linear-gradient(135deg, #c084fc 0%, #8b5cf6 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .table-count {
            background: rgba(139, 92, 246, 0.15);
            color: #a78bfa;
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 600;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }
        
        th {
            background: rgba(139, 92, 246, 0.1);
            color: #a78bfa;
            padding: 12px 16px;
            text-align: left;
            font-weight: 600;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        
        td {
            padding: 12px 16px;
            border-bottom: 1px solid rgba(139, 92, 246, 0.1);
            color: #e2e8f0;
        }
        
        tr:hover {
            background: rgba(139, 92, 246, 0.05);
        }
        
        .clickable {
            color: #c084fc;
            cursor: pointer;
            font-family: 'SF Mono', monospace;
            font-weight: 600;
        }
        
        .clickable:hover {
            color: #8b5cf6;
            text-decoration: underline;
        }
        
        .status-success {
            color: #10b981;
            font-weight: 600;
        }
        
        .status-failed {
            color: #ef4444;
            font-weight: 600;
        }
        
        .status-running {
            color: #fbbf24;
            font-weight: 600;
        }
        
        /* Input area */
        .input-container {
            padding: 24px 32px;
            background: linear-gradient(180deg, transparent 0%, #1a1a2e 100%);
            border-top: 1px solid rgba(139, 92, 246, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .input-wrapper {
            max-width: 1000px;
            margin: 0 auto;
            display: flex;
            gap: 16px;
            align-items: center;
        }
        
        #user-input {
            flex: 1;
            padding: 18px 28px;
            background: rgba(30, 30, 46, 0.6);
            border: 2px solid rgba(139, 92, 246, 0.2);
            border-radius: 30px;
            color: #f3e8ff;
            font-size: 16px;
            outline: none;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
        }
        
        #user-input::placeholder {
            color: #6b7280;
        }
        
        #user-input:focus {
            border-color: rgba(139, 92, 246, 0.5);
            box-shadow: 0 0 0 4px rgba(139, 92, 246, 0.1);
            background: rgba(30, 30, 46, 0.8);
        }
        
        #send-button {
            padding: 18px 36px;
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            border: none;
            border-radius: 30px;
            font-size: 16px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 24px rgba(139, 92, 246, 0.3);
        }
        
        #send-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 32px rgba(139, 92, 246, 0.4);
        }
        
        #upload-button {
            padding: 18px 20px;
            background: rgba(139, 92, 246, 0.2);
            color: #a78bfa;
            border: 2px solid rgba(139, 92, 246, 0.3);
            border-radius: 30px;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s;
            margin-right: 10px;
        }
        
        #upload-button:hover {
            background: rgba(139, 92, 246, 0.3);
            transform: translateY(-1px);
        }
        
        /* Paste Button */
        #paste-button {
            padding: 18px 20px;
            background: rgba(139, 92, 246, 0.2);
            color: #a78bfa;
            border: 2px solid rgba(139, 92, 246, 0.3);
            border-radius: 30px;
            font-size: 20px;
            cursor: pointer;
            transition: all 0.3s;
            margin-right: 10px;
        }
        
        #paste-button:hover {
            background: rgba(139, 92, 246, 0.3);
            transform: translateY(-1px);
        }
        
        /* Paste Container */
        .paste-container {
            position: fixed;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 800px;
            background: linear-gradient(135deg, #1a1a2e 0%, #0f0f23 100%);
            border: 2px solid rgba(139, 92, 246, 0.3);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 -10px 40px rgba(0, 0, 0, 0.8);
            z-index: 1000;
        }
        
        .paste-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .paste-header h3 {
            margin: 0;
            color: #c084fc;
        }
        
        .close-btn {
            background: none;
            border: none;
            color: #94a3b8;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .close-btn:hover {
            color: #c084fc;
        }
        
        /* Syntax Highlighting */
        .code-editor-wrapper {
            position: relative;
            display: flex;
            flex-direction: row;  /* Ensure horizontal layout */
            background: #0f0f23;
            border: 1px solid rgba(139, 92, 246, 0.3);
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 15px;
            font-family: 'SF Mono', 'Monaco', monospace;
            font-size: 13px;
            line-height: 1.5;
            height: 400px;
        }
        
        .line-numbers {
            background: #0a0a1a;
            color: #4a5568;
            padding: 15px 10px;
            text-align: right;
            user-select: none;
            border-right: 1px solid rgba(139, 92, 246, 0.2);
            min-width: 50px;
            overflow-y: auto;
            overflow-x: hidden;
            white-space: pre-line;
            flex-shrink: 0;
        }
        
        .code-editor-container {
            position: relative;
            flex: 1;
            overflow: hidden;
        }
        
        #code-paste {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            padding: 15px;
            background: transparent;
            border: none;
            color: transparent;
            caret-color: #a78bfa;
            resize: none;
            outline: none;
            font-family: inherit;
            font-size: inherit;
            line-height: inherit;
            white-space: pre;
            overflow: auto;
            z-index: 2;
        }
        
        .code-highlight {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            padding: 15px;
            margin: 0;
            pointer-events: none;
            overflow: auto;
            white-space: pre;
            z-index: 1;
        }
        
        .code-highlight code {
            background: none !important;
            padding: 0 !important;
            font-family: inherit;
            font-size: inherit;
            line-height: inherit;
        }
        
        /* Paste Actions */
        .paste-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }
        
        .paste-actions button {
            padding: 10px 24px;
            background: rgba(139, 92, 246, 0.2);
            color: #a78bfa;
            border: 1px solid rgba(139, 92, 246, 0.3);
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
        }
        
        .paste-actions button.primary {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            border: none;
        }
        
        .paste-actions button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }
/* Paste Dialog Styles */
.paste-dialog {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.paste-content {
    background: #1a1a2e;
    border: 2px solid rgba(139, 92, 246, 0.3);
    border-radius: 16px;
    padding: 30px;
    width: 600px;
    max-height: 80vh;
    overflow-y: auto;
}

.paste-examples {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.paste-examples button {
    padding: 8px 16px;
    background: rgba(139, 92, 246, 0.2);
    color: #a78bfa;
    border: 1px solid rgba(139, 92, 246, 0.3);
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
}

.paste-examples button:hover {
    background: rgba(139, 92, 246, 0.3);
}

#paste-code {
    width: 100%;
    height: 300px;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(139, 92, 246, 0.3);
    border-radius: 8px;
    color: #e2e8f0;
    font-family: "Monaco", "Menlo", monospace;
    font-size: 14px;
    padding: 15px;
    margin-bottom: 20px;
}

.argument-section {
    margin-bottom: 20px;
}

.argument-section h4 {
    color: #a78bfa;
    margin-bottom: 10px;
}

#paste-args {
    width: 100%;
    padding: 10px;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(139, 92, 246, 0.3);
    border-radius: 8px;
    color: #e2e8f0;
    font-size: 16px;
}

.arg-hints {
    margin-top: 8px;
    color: #94a3b8;
}

.paste-options {
    margin-bottom: 20px;
}

.paste-options label {
    display: flex;
    align-items: center;
    gap: 10px;
    color: #cbd5e1;
}

.paste-buttons {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
}

.paste-buttons button {
    padding: 10px 20px;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
}

.paste-buttons button:first-child {
    background: rgba(139, 92, 246, 0.2);
    color: #a78bfa;
    border: 2px solid rgba(139, 92, 246, 0.3);
}

.paste-buttons button:first-child:hover {
    background: rgba(139, 92, 246, 0.3);
}

.paste-buttons button:last-child {
    background: rgba(239, 68, 68, 0.2);
    color: #f87171;
    border: 2px solid rgba(239, 68, 68, 0.3);
}
    </style>
</head>
<body>
    <div class="sidebar">
        <h3>✨ ZKP Agent Kit - 3 Core Proofs</h3>
        <div class="info-box">
            Generate real cryptographic proofs for three key use cases: Circle KYC compliance verification, AI content authenticity, and DePIN location verification. All metrics shown are actual values from proof generation - no simulations.
        </div>
        
        <div class="example-category">
            <h4>🌐 Generate Zero-Knowledge Proofs</h4>
            <div class="example-item" data-example="prove kyc compliance">
                <strong>Prove KYC</strong> - Generate Circle KYC compliance proof
            </div>
            <div class="example-item" data-example="prove ai content authenticity">
                <strong>Prove AI Content</strong> - Generate AI authenticity proof
            </div>
            <div class="example-item" data-example="prove device location in San Francisco">
                <strong>Prove Location</strong> - Generate location proof (SF, NYC, London)
            </div>
        </div>
        
        <div class="example-category">
            <h4>📊 Proof Management</h4>
            <div class="example-item" data-example="list all proofs">
                <strong>📋 View All Proofs</strong> - Show proof history
            </div>
            <div class="example-item" data-example="list verifications">
                <strong>✅ View Verifications</strong> - Show verification history
            </div>
            <div class="example-item" data-example="verify">
                <strong>🔍 Verify</strong> - Verify last proof
            </div>
            <div class="example-item" data-example="help">
                <strong>❓ Help</strong> - Show commands
            </div>
        </div>
    </div>
    
    <div class="main-container">
        <div class="header">
            <h1>🚀 zkEngine Agent Kit</h1>
            <div class="status">
                <div class="status-dot" id="status-dot"></div>
                <span id="connection-status">Connecting...</span>
            </div>
        </div>
        
        <div class="messages-container">
            <div id="messages"></div>
        </div>
        
        <div class="input-container">
            <div class="input-wrapper">
                <input type="file" id="file-upload" accept=".c" style="display: none;" onchange="handleFileUpload(event)">
                <button id="upload-button" onclick="document.getElementById('file-upload').click()" title="Upload C file">
                    📤
                </button>
                <button id="paste-button" onclick="togglePasteArea()" title="Paste C code">
                    📋
                </button>
                <input type="text" id="user-input" placeholder="Ask me to prove a computation..." autofocus>
                <button id="send-button">Send</button>
            </div>
        </div>
    </div>
    
    <!-- Paste Container -->
    <div id="paste-area" style="display: none;" class="paste-container">
        <div class="paste-header">
            <h3>📋 Paste C Code</h3>
            <button class="close-btn" onclick="togglePasteArea()">×</button>
        </div>
        
        <div class="code-editor-wrapper">
            <div class="line-numbers" id="line-numbers">1</div>
            <div class="code-editor-container">
                <textarea id="code-paste" 
                    placeholder="// Paste your C code here or try an example below"
                    spellcheck="false"
                    autocomplete="off"
                    autocorrect="off"
                    autocapitalize="off"></textarea>
                <pre class="code-highlight" id="code-highlight"><code class="language-c"></code></pre>
            </div>
        </div>
        
        <div style="margin-bottom: 15px;">
            <span style="color: #94a3b8; font-size: 13px;">Try an example:</span>
            <button onclick="loadPasteExample('simple')" style="margin: 0 5px; padding: 6px 16px; background: rgba(139, 92, 246, 0.1); border: 1px solid rgba(139, 92, 246, 0.2); color: #a78bfa; border-radius: 8px; cursor: pointer; font-size: 13px; font-weight: 500;">🔢 Prime Check</button>
            <button onclick="loadPasteExample('range')" style="margin: 0 5px; padding: 6px 16px; background: rgba(139, 92, 246, 0.1); border: 1px solid rgba(139, 92, 246, 0.2); color: #a78bfa; border-radius: 8px; cursor: pointer; font-size: 13px; font-weight: 500;">🔄 Collatz Steps</button>
            <button onclick="loadPasteExample('hash')" style="margin: 0 5px; padding: 6px 16px; background: rgba(139, 92, 246, 0.1); border: 1px solid rgba(139, 92, 246, 0.2); color: #a78bfa; border-radius: 8px; cursor: pointer; font-size: 13px; font-weight: 500;">➕ Digital Root</button>
        </div>
        
        <div class="paste-actions">
            <button onclick="togglePasteArea()">Cancel</button>
            <button class="primary" onclick="processCodePaste()">Transform & Compile</button>
        </div>
    </div>
    
    <!-- Load Prism.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-c.min.js"></script>
    
    <!-- Main JavaScript -->
    <script>
        let lastPastedCode = "";
        // Global state
        let ws = null;
        let proofStates = {};
        let waitingForResponse = false;
        let thinkingAnimation = null;
        
        // WebSocket connection
        function connect() {
            try {
                ws = new WebSocket('ws://localhost:8001/ws');
                
                ws.onopen = () => {
                    console.log('Connected to zkEngine');
                    document.getElementById('connection-status').textContent = 'Connected';
                    document.getElementById('status-dot').style.backgroundColor = '#10b981';
                };
                
                ws.onmessage = (event) => {
                    console.log('Received:', event.data);
                    try {
                        const data = JSON.parse(event.data);
                        handleMessage(data);
                    } catch (e) {
                        console.error('Failed to parse message:', e);
                        addMessage(event.data, 'assistant');
                    }
                };
                
                ws.onclose = () => {
                    console.log('Disconnected from zkEngine');
                    document.getElementById('connection-status').textContent = 'Disconnected';
                    document.getElementById('status-dot').style.backgroundColor = '#ef4444';
                    // Reconnect after 3 seconds
                    setTimeout(connect, 3000);
                };
                
                ws.onerror = (error) => {
                    console.error('WebSocket error:', error);
                    document.getElementById('connection-status').textContent = 'Error';
                    document.getElementById('status-dot').style.backgroundColor = '#ef4444';
                };
            } catch (error) {
                console.error('Failed to create WebSocket connection:', error);
            }
        }
        
        // Loading animation functions
        function showLoadingCard() {
            const messagesDiv = document.getElementById('messages');
            const loadingCard = document.createElement('div');
            loadingCard.className = 'loading-card';
            loadingCard.id = 'loading-card';
            
            loadingCard.innerHTML = `
                <div class="loading-content">
                    <div class="loading-spinner">⚡</div>
                    <span class="loading-text">Generating proof<span class="loading-ellipses"></span></span>
                </div>
            `;
            
            messagesDiv.appendChild(loadingCard);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }

        function removeLoadingCard() {
            const loadingCard = document.getElementById('loading-card');
            if (loadingCard) {
                loadingCard.remove();
            }
        }
        
        // Message handling
        function handleMessage(data) {
            removeThinkingAnimation();
            removeLoadingDots();
            removeLoadingCard();
            
            // Handle structured data
            if (data.data && data.data.type) {
                const dataType = data.data.type;
                console.log('Handling data type:', dataType);
                
                switch(dataType) {
                    case 'proof_start':
                        removeLoadingCard();
                        createProofCard(data.data.proof_id, 'running', data.content, data.data);
                        break;
                    case 'proof_complete':
                        updateProofCard(data.data.proof_id, 'success', data.content, data.data);
                        break;
                    case 'proof_list':
                        displayProofsList(data.data.proofs || []);
                        break;
                    case 'verification_list':
                        displayVerificationsList(data.data.verifications || []);
                        break;
                    case 'verification_complete':
                        displayVerificationResult(data.data);
                        break;
                    default:
                        console.log('Unknown data type:', dataType);
                }
                return;
            }
            
            // Handle regular messages
            if (data.content) {
                addMessage(data.content, 'assistant');
            }
        }
        
        // Basic message functions
        function addMessage(content, sender) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = 'message-content';
            contentDiv.textContent = content;
            
            messageDiv.appendChild(contentDiv);
            messagesDiv.appendChild(messageDiv);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function sendMessage(text) {
            const input = document.getElementById('user-input');
            const message = text || input.value.trim();
            
            if (message && ws && ws.readyState === WebSocket.OPEN) {
                addMessage(message, 'user');
                
                // Show loading card for proof commands, thinking animation for others
                if (message.toLowerCase().includes('prove')) {
                    showLoadingCard();
                } else {
                    showThinkingAnimation();
                }
                
                ws.send(JSON.stringify({ message }));
                if (!text) input.value = '';
            }
        }
        
        function showThinkingAnimation() {
            if (thinkingAnimation) return;
            
            const messagesDiv = document.getElementById('messages');
            thinkingAnimation = document.createElement('div');
            thinkingAnimation.className = 'thinking-animation';
            thinkingAnimation.innerHTML = `
                <span style="color: #a78bfa; font-size: 14px;">Thinking</span>
                <div class="thinking-dots">
                    <div class="dot"></div>
                    <div class="dot"></div>
                    <div class="dot"></div>
                </div>
            `;
            messagesDiv.appendChild(thinkingAnimation);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function removeThinkingAnimation() {
            if (thinkingAnimation) {
                thinkingAnimation.remove();
                thinkingAnimation = null;
            }
        }
        
        function removeLoadingDots() {
            const dots = document.querySelector('.loading-dots');
            if (dots) {
                dots.remove();
            }
            waitingForResponse = false;
        }
        
        // File display functions
        function showCProgram(proofId) {
            const state = proofStates[proofId];
            if (!state || !state.wasmFile) return;
            
            let cCode = '';
            let cFileName = state.wasmFile.replace('.wat', '.c');
            
            // Get appropriate C code based on function type
            if (state.functionName === 'location' || state.wasmFile.includes('location')) {
                cCode = getLocationCProgram();
            } else if (state.functionName === 'kyc' || state.wasmFile.includes('kyc')) {
                cCode = getKYCProgram();
            } else if (state.functionName === 'ai_content' || state.wasmFile.includes('ai_content')) {
                cCode = getAIContentProgram();
            } else {
                cCode = '// Custom C program\nint main() {\n    return 0;\n}';
            }
            
            showCodeModal('C Program', cFileName, cCode, true);
        }

        function showWasmFile(proofId) {
            const state = proofStates[proofId];
            if (!state || !state.wasmFile) return;
            
            // Try to fetch actual WAT file
            fetch(`/static/example_wasms/${state.wasmFile}`)
                .then(res => res.text())
                .then(watCode => {
                    showCodeModal('WASM File', state.wasmFile, watCode, false);
                })
                .catch(() => {
                    // Fallback to example
                    const watExample = getWasmExample(state.functionName);
                    showCodeModal('WASM File', state.wasmFile, watExample, false);
                });
        }

        function showCodeModal(title, filename, code, isCProgram) {
            const modal = document.createElement('div');
            modal.className = 'code-modal';
            modal.onclick = (e) => {
                if (e.target === modal) modal.remove();
            };
            
            const icon = isCProgram ? '📄' : '⚙️';
            const functionType = filename.includes('location') ? 'Location' : 
                               filename.includes('kyc') ? 'KYC Compliance' : 
                               filename.includes('ai_content') ? 'AI Content Authenticity' : 
                               'computation';
            
            const info = isCProgram 
                ? `This is the original C program that was compiled to WebAssembly for <strong>${functionType}</strong>. Users upload C code which gets compiled to WASM for cryptographic proof generation.`
                : 'This is the WebAssembly Text format (WAT) file generated from the C program. zkEngine processes this file to generate zero-knowledge proofs.';
            
            modal.innerHTML = `
                <div class="code-modal-content">
                    <div class="code-modal-header">
                        <div class="code-modal-title">
                            <span>${icon}</span>
                            <span>${title}: ${filename}</span>
                        </div>
                        <button class="close-btn" onclick="this.closest('.code-modal').remove()">×</button>
                    </div>
                    <div class="code-info">${info}</div>
                    <div class="code-display">
                        <pre><code class="language-${isCProgram ? 'c' : 'wasm'}">${escapeHtml(code)}</code></pre>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Apply syntax highlighting if Prism is available
            if (typeof Prism !== 'undefined') {
                Prism.highlightAllUnder(modal);
            }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Example content functions
        function getLocationCProgram() {
            return `#include <stdint.h>

// DePIN Location Proof for San Francisco
// Verifies if coordinates are within SF boundaries
// Returns 1 if within bounds, 0 otherwise

#define SF_LAT 37773972    // 37.773972 * 1000000 (scaled for integer math)
#define SF_LNG -122431297  // -122.431297 * 1000000 (scaled for integer math)
#define MAX_DISTANCE 50000 // 50km threshold in scaled units

// Helper function to calculate absolute value
int32_t abs_diff(int32_t a, int32_t b) {
    return (a > b) ? (a - b) : (b - a);
}

// Main location verification function
int32_t location(int32_t lat, int32_t lng) {
    // Calculate Manhattan distance (simplified for proof)
    int32_t lat_diff = abs_diff(lat, SF_LAT);
    int32_t lng_diff = abs_diff(lng, SF_LNG);
    
    // Check if within bounds
    if (lat_diff < MAX_DISTANCE && lng_diff < MAX_DISTANCE) {
        return 1; // Within San Francisco area
    }
    return 0; // Outside bounds
}`;
        }

        function getKYCProgram() {
            return `#include <stdint.h>

// Circle KYC Compliance Verification
// Verifies user meets compliance requirements
// Returns 1 if compliant, 0 otherwise

#define MIN_AGE 18
#define MAX_RISK_SCORE 75

// Check KYC compliance
int32_t kyc_check(int32_t age, int32_t risk_score) {
    // Age verification
    if (age < MIN_AGE) {
        return 0; // Too young
    }
    
    // Risk assessment
    if (risk_score > MAX_RISK_SCORE) {
        return 0; // Risk too high
    }
    
    // All checks passed
    return 1;
}`;
        }

        function getAIContentProgram() {
            return `#include <stdint.h>

// AI Content Authenticity Verification
// Proves content was generated by authorized AI
// Uses simplified hash verification

#define MAGIC_HASH 0x5A5A5A5A

// Verify AI content authenticity
int32_t verify_ai_content(int32_t content_hash, int32_t signature) {
    // Simple verification for demo
    int32_t expected = content_hash ^ MAGIC_HASH;
    
    if (signature == expected) {
        return 1; // Authentic
    }
    return 0; // Not authentic
}`;
        }

        function getWasmExample(functionType) {
            if (functionType === 'location') {
                return `(module
  (func $abs_diff (param $a i32) (param $b i32) (result i32)
    (if (result i32)
      (i32.gt_s (local.get $a) (local.get $b))
      (then (i32.sub (local.get $a) (local.get $b)))
      (else (i32.sub (local.get $b) (local.get $a)))
    )
  )
  
  (func (export "location") (param $lat i32) (param $lng i32) (result i32)
    (local $lat_diff i32)
    (local $lng_diff i32)
    
    (local.set $lat_diff 
      (call $abs_diff (local.get $lat) (i32.const 37773972))
    )
    (local.set $lng_diff
      (call $abs_diff (local.get $lng) (i32.const -122431297))
    )
    
    (if (result i32)
      (i32.and
        (i32.lt_s (local.get $lat_diff) (i32.const 50000))
        (i32.lt_s (local.get $lng_diff) (i32.const 50000))
      )
      (then (i32.const 1))
      (else (i32.const 0))
    )
  )
)`;
            }
            // Add more WAT examples for other types
            return '(module\n  (func (export "main") (result i32)\n    (i32.const 1)\n  )\n)';
        }
        
        // Proof card functions
        function createProofCard(proofId, status, content, data = null) {
            const messagesDiv = document.getElementById('messages');
            
            let functionName = 'computation';
            let args = '';
            let wasmFile = 'custom.wat';
            
            if (data) {
                functionName = data.function || functionName;
                args = data.arguments ? data.arguments.join(', ') : args;
                wasmFile = data.wasm_file || wasmFile;
            }
            
            proofStates[proofId] = { status, functionName, args, wasmFile };
            
            const cardDiv = document.createElement('div');
            cardDiv.className = `proof-card ${status}`;
            cardDiv.id = `proof-${proofId}`;
            
            const proofIdShort = proofId.substring(0, 8);
            
            cardDiv.innerHTML = `
                <div class="card-header">
                    <div class="card-title">
                        <div class="card-icon spinning">⚡</div>
                        <span class="card-title-text">Proof Generation</span>
                    </div>
                    <div class="card-badge badge-processing">
                        GENERATING
                    </div>
                </div>
                
                <div class="metrics-row">
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Proof ID:</span>
                        <span class="metric-value-inline">${proofIdShort}</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Function:</span>
                        <span class="metric-value-inline">${functionName}(${args})</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Status:</span>
                        <span class="metric-value-inline">Generating...</span>
                    </div>
                </div>
            `;
            
            messagesDiv.appendChild(cardDiv);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function updateProofCard(proofId, status, content, data = null) {
            const card = document.getElementById(`proof-${proofId}`);
            if (!card) {
                createProofCard(proofId, status, content, data);
                return;
            }
            
            const state = proofStates[proofId] || {};
            card.className = `proof-card ${status}`;
            
            const proofIdShort = proofId.substring(0, 8);
            const functionName = state.functionName || 'computation';
            const args = state.args || '';
            
            let timeDisplay = 'N/A';
            let sizeDisplay = 'N/A';
            
            if (data) {
                timeDisplay = data.time ? `${data.time.toFixed(1)}s` : timeDisplay;
                sizeDisplay = data.size ? `${data.size.toFixed(1)}MB` : sizeDisplay;
            }
            
            card.innerHTML = `
                <div class="card-header">
                    <div class="card-title">
                        <div class="card-icon">✅</div>
                        <span class="card-title-text">Proof Generated</span>
                    </div>
                    <div class="card-badge badge-success">
                        COMPLETE
                    </div>
                </div>
                
                <div class="metrics-row">
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Proof ID:</span>
                        <span class="metric-value-inline">${proofIdShort}</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Function:</span>
                        <span class="metric-value-inline">${functionName}(${args})</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Time:</span>
                        <span class="metric-value-inline">${timeDisplay}</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Size:</span>
                        <span class="metric-value-inline">${sizeDisplay}</span>
                    </div>
                </div>
                
                <div class="card-actions">
                    <button class="action-btn" onclick="verifyProof('${proofId}')">
                        🔍 Verify Proof
                    </button>
                    <button class="action-btn secondary" onclick="showCProgram('${proofId}')">
                        📄 C Program
                    </button>
                    <button class="action-btn secondary" onclick="showWasmFile('${proofId}')">
                        ⚙️ Wasm File
                    </button>
                    <button class="action-btn secondary" onclick="copyToClipboard('${proofId}')">
                        📋 Copy ID
                    </button>
                </div>
            `;
        }
        
        function displayProofsList(proofs) {
            const messagesDiv = document.getElementById('messages');
            
            const tableDiv = document.createElement('div');
            tableDiv.className = 'data-table';
            
            const recentProofs = proofs
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                .slice(0, 20);
            
            let tableHTML = `
                <div class="table-header">
                    <div class="table-title">📋 Recent Proof History</div>
                    <div class="table-count">${recentProofs.length} of ${proofs.length} proofs</div>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Proof ID</th>
                            <th>Function</th>
                            <th>Arguments</th>
                            <th>Status</th>
                            <th>Time</th>
                            <th>Created</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            if (recentProofs.length === 0) {
                tableHTML += `
                    <tr>
                        <td colspan="6" style="text-align: center; color: #94a3b8; padding: 40px;">
                            No proofs generated yet. Try generating a proof!
                        </td>
                    </tr>
                `;
            } else {
                recentProofs.forEach(proof => {
                    const proofIdShort = proof.id.substring(0, 8);
                    const functionName = proof.metadata.function || 'computation';
                    const args = proof.metadata.arguments.join(', ') || 'none';
                    const statusClass = proof.status === 'Complete' ? 'status-success' : 'status-running';
                    const time = proof.metrics.generation_time_secs ? `${proof.metrics.generation_time_secs.toFixed(1)}s` : 'N/A';
                    const created = new Date(proof.timestamp).toLocaleString();
                    
                    tableHTML += `
                        <tr>
                            <td><span class="clickable" onclick="copyToClipboard('${proof.id}')">${proofIdShort}</span></td>
                            <td>${functionName}</td>
                            <td>${args}</td>
                            <td><span class="${statusClass}">${proof.status}</span></td>
                            <td>${time}</td>
                            <td>${created}</td>
                        </tr>
                    `;
                });
            }
            
            tableHTML += `
                    </tbody>
                </table>
            `;
            
            tableDiv.innerHTML = tableHTML;
            messagesDiv.appendChild(tableDiv);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function displayVerificationsList(verifications) {
            const messagesDiv = document.getElementById('messages');
            
            const tableDiv = document.createElement('div');
            tableDiv.className = 'data-table';
            
            const recentVerifications = verifications
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                .slice(0, 20);
            
            let tableHTML = `
                <div class="table-header">
                    <div class="table-title">✅ Recent Verification History</div>
                    <div class="table-count">${recentVerifications.length} verifications</div>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Verification ID</th>
                            <th>Proof ID</th>
                            <th>Result</th>
                            <th>Time</th>
                            <th>Verified At</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            recentVerifications.forEach(verification => {
                const verifyIdShort = verification.id.substring(0, 8);
                const proofIdShort = verification.proof_id.substring(0, 8);
                const resultClass = verification.is_valid ? 'status-success' : 'status-failed';
                const result = verification.is_valid ? 'VALID ✅' : 'INVALID ❌';
                const time = verification.verification_time_secs ? `${verification.verification_time_secs.toFixed(3)}s` : 'N/A';
                const verified = new Date(verification.timestamp).toLocaleString();
                
                tableHTML += `
                    <tr>
                        <td><span class="clickable">${verifyIdShort}</span></td>
                        <td><span class="clickable">${proofIdShort}</span></td>
                        <td><span class="${resultClass}">${result}</span></td>
                        <td>${time}</td>
                        <td>${verified}</td>
                    </tr>
                `;
            });
            
            tableHTML += `
                    </tbody>
                </table>
            `;
            
            tableDiv.innerHTML = tableHTML;
            messagesDiv.appendChild(tableDiv);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        function displayVerificationResult(data) {
            const messagesDiv = document.getElementById('messages');
            
            const cardDiv = document.createElement('div');
            cardDiv.className = `proof-card ${data.is_valid ? 'success' : 'failed'}`;
            
            const proofIdShort = data.proof_id.substring(0, 8);
            const resultIcon = data.is_valid ? '✅' : '❌';
            const resultText = data.is_valid ? 'VALID' : 'INVALID';
            const badgeClass = data.is_valid ? 'badge-success' : 'badge-failed';
            
            cardDiv.innerHTML = `
                <div class="card-header">
                    <div class="card-title">
                        <div class="card-icon">${resultIcon}</div>
                        <span class="card-title-text">Proof Verification</span>
                    </div>
                    <div class="card-badge ${badgeClass}">
                        ${resultText}
                    </div>
                </div>
                
                <div class="metrics-row">
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Proof ID:</span>
                        <span class="metric-value-inline">${proofIdShort}</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Result:</span>
                        <span class="metric-value-inline">${resultText}</span>
                    </div>
                    <div class="metric-item-inline">
                        <span class="metric-label-inline">Time:</span>
                        <span class="metric-value-inline">${data.verification_time_secs ? data.verification_time_secs.toFixed(3) + 's' : 'N/A'}</span>
                    </div>
                </div>
            `;
            
            messagesDiv.appendChild(cardDiv);
            messagesDiv.parentElement.scrollTop = messagesDiv.parentElement.scrollHeight;
        }
        
        // Helper functions
        function verifyProof(proofId) {
            sendMessage(`verify proof ${proofId}`);
        }
        
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                console.log('Copied to clipboard:', text);
            }).catch(err => {
                console.error('Failed to copy:', err);
            });
        }
        
        // Paste functionality
        function togglePasteArea() {
            const pasteArea = document.getElementById('paste-area');
            if (!pasteArea) {
                console.error('Paste area element not found');
                return;
            }
            
            const isVisible = pasteArea.style.display !== 'none';
            pasteArea.style.display = isVisible ? 'none' : 'block';
            
            if (!isVisible) {
                const textarea = document.getElementById('code-paste');
                if (textarea) {
                    textarea.focus();
                    textarea.value = '';
                    updateSyntaxHighlight();
                }
            }
        }
        
        function updateSyntaxHighlight() {
            const textarea = document.getElementById('code-paste');
            const highlight = document.getElementById('code-highlight');
            const lineNumbers = document.getElementById('line-numbers');
            
            if (!textarea || !highlight || !lineNumbers) return;
            
            const code = textarea.value || textarea.placeholder;
            
            if (highlight) {
                highlight.textContent = code;
                if (typeof Prism !== 'undefined' && Prism.highlightElement) {
                    Prism.highlightElement(highlight);
                }
            }
            
            // Update line numbers
            const lines = code.split('\n');
            let lineNumbersText = '';
            for (let i = 1; i <= lines.length; i++) {
                lineNumbersText += i + '\n';
            }
            lineNumbers.textContent = lineNumbersText.trim();
            
            // Sync scroll positions
            textarea.addEventListener('scroll', function() {
                highlight.scrollTop = textarea.scrollTop;
                highlight.scrollLeft = textarea.scrollLeft;
                lineNumbers.scrollTop = textarea.scrollTop;
            });
        }
        
        function loadPasteExample(type) {
            const examples = {
                'simple': `/*
 * Prime Number Checker Example
 * 
 * This function checks if a number is prime.
 * The main function takes ONE argument:
 * - input: the number to check (e.g., 17)
 * 
 * To test with different values, simply change
 * the number in the function call below.
 */

int is_prime(int n) {
    if (n <= 1) return 0;
    if (n == 2) return 1;
    if (n % 2 == 0) return 0;
    
    // Check odd divisors up to sqrt(n)
    for (int i = 3; i * i <= n; i += 2) {
        if (n % i == 0) return 0;
    }
    return 1;
}

int main() {
    // Change this value to test different numbers
    int number_to_check = 17;
    
    return is_prime(number_to_check);
}`,
                
                'range': `/*
 * Collatz Conjecture Steps Calculator
 * 
 * This calculates how many steps it takes
 * for a number to reach 1 using the Collatz
 * conjecture rules:
 * - If even: divide by 2
 * - If odd: multiply by 3 and add 1
 * 
 * Change the starting_number value below
 * to test different sequences.
 */

int collatz_steps(int n) {
    int steps = 0;
    
    // Ensure positive number
    if (n <= 0) n = 1;
    
    while (n != 1 && steps < 1000) {
        if (n % 2 == 0) {
            n = n / 2;
        } else {
            n = 3 * n + 1;
        }
        steps++;
    }
    
    return steps;
}

int main() {
    // Change this value to test different starting numbers
    int starting_number = 27;
    
    return collatz_steps(starting_number);
}`,
                
                'hash': `/*
 * Digital Root Calculator
 * 
 * The digital root is obtained by repeatedly
 * summing the digits of a number until a
 * single digit remains.
 * 
 * For example: 12345 → 1+2+3+4+5 = 15 → 1+5 = 6
 * 
 * Change the input_number value below to
 * calculate the digital root of different numbers.
 */

int digit_sum(int n) {
    int sum = 0;
    
    // Make positive
    if (n < 0) n = -n;
    
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int digital_root(int n) {
    while (n >= 10) {
        n = digit_sum(n);
    }
    return n;
}

int main() {
    // Change this value to calculate different digital roots
    int input_number = 12345;
    
    return digital_root(input_number);
}`
            };
            
            const textarea = document.getElementById('code-paste');
            if (textarea && examples[type]) {
                textarea.value = examples[type];
                lastPastedCode = examples[type];
                updateSyntaxHighlight();
            }
        }
        
        async function processCodePaste() {
            const textarea = document.getElementById('code-paste');
            if (!textarea) return;
            
            const code = textarea.value;
            if (!code.trim()) {
                alert('Please paste some C code first');
                return;
            }
            
            lastPastedCode = code;
            
            try {
                const transformRes = await fetch('http://localhost:8002/api/transform-code', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({code: code, auto_transform: true})
                });
                
                if (!transformRes.ok) {
                    throw new Error('Transform failed');
                }
                
                const transformed = await transformRes.json();
                
                const compileRes = await fetch('http://localhost:8002/api/compile-transformed', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        code: transformed.transformed_code,
                        filename: 'pasted_' + Date.now()
                    })
                });
                
                if (!compileRes.ok) {
                    throw new Error('Compilation failed');
                }
                
                const compiled = await compileRes.json();
                
                if (compiled.success) {
                    togglePasteArea();
                    // Since the values are now hardcoded in the C code,
                    // we just need to run the proof without arguments
                    const cmd = `prove custom ${compiled.wasm_file}`;
                    document.getElementById('user-input').value = cmd;
                    sendMessage(cmd);
                } else {
                    alert('Compilation failed: ' + (compiled.error || 'Unknown error'));
                }
            } catch (e) {
                console.error('Error:', e);
                alert('Please ensure the integrated service is running:\npython langchain_service.py');
            }
        }
        
        async function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file || !file.name.endsWith('.c')) {
                alert('Please upload a C file (.c)');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = async (e) => {
                const code = e.target.result;
                try {
                    const transformResponse = await fetch('http://localhost:8002/api/transform-code', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({code: code, auto_transform: true})
                    });
                    
                    if (!transformResponse.ok) {
                        throw new Error('Transform failed');
                    }
                    
                    const transformed = await transformResponse.json();
                    
                    const compileResponse = await fetch('http://localhost:8002/api/compile-transformed', {
                        method: 'POST', 
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({
                            code: transformed.transformed_code, 
                            filename: file.name.replace('.c', '')
                        })
                    });
                    
                    if (!compileResponse.ok) {
                        throw new Error('Compilation failed');
                    }
                    
                    const compiled = await compileResponse.json();
                    
                    if (compiled.success) {
                        const cmd = `prove custom ${compiled.wasm_file}`;
                        document.getElementById('user-input').value = cmd;
                        sendMessage(cmd);
                    } else {
                        alert('Compilation failed: ' + (compiled.error || 'Unknown error'));
                    }
                } catch (e) {
                    console.error('Error:', e);
                    alert('Please ensure the integrated service is running: python langchain_service.py');
                }
            };
            reader.readAsText(file);
            
            event.target.value = '';
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Connect WebSocket
            connect();
            
            // Setup input handlers
            const userInput = document.getElementById('user-input');
            if (userInput) {
                userInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        sendMessage();
                    }
                });
            }
            
            const sendButton = document.getElementById('send-button');
            if (sendButton) {
                sendButton.addEventListener('click', () => sendMessage());
            }
            
            // Setup paste functionality
            const textarea = document.getElementById('code-paste');
            if (textarea) {
                textarea.addEventListener('input', updateSyntaxHighlight);
                // Initial syntax highlight
                updateSyntaxHighlight();
            }
            
            // Example clicks
            document.addEventListener('click', function(e) {
                if (e.target.closest('.example-item')) {
                    const example = e.target.closest('.example-item').getAttribute('data-example');
                    if (example) {
                        document.getElementById('user-input').value = example;
                        sendMessage(example);
                    }
                }
            });
            
            // Close paste area on outside click
            document.addEventListener('click', function(event) {
                const pasteArea = document.getElementById('paste-area');
                const pasteButton = document.getElementById('paste-button');
                
                if (pasteArea && pasteButton && 
                    pasteArea.style.display !== 'none' && 
                    !pasteArea.contains(event.target) && 
                    event.target !== pasteButton) {
                    togglePasteArea();
                }
            });
        });
    </script>
</body>
</html>
