<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>zkEngine Agent Kit</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0a0a0a;
            color: #e0e0e0;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
        }
        .header h1 {
            font-size: 2.5em;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }
        .status {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            font-size: 0.9em;
        }
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #ff4444;
        }
        .status-dot.connected {
            background: #44ff44;
        }
        .main-content {
            display: grid;
            grid-template-columns: 280px 1fr;
            gap: 30px;
        }
        .sidebar {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 20px;
            height: fit-content;
        }
        .sidebar h3 {
            font-size: 0.9em;
            color: #999;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 15px;
        }
        .example {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .example:hover {
            background: rgba(102, 126, 234, 0.2);
            border-color: #667eea;
            transform: translateX(5px);
        }
        .chat-container {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 20px;
            height: 600px;
            display: flex;
            flex-direction: column;
        }
        .messages {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding-right: 10px;
        }
        .message {
            margin-bottom: 16px;
            display: flex;
            gap: 12px;
        }
        .message.user {
            flex-direction: row-reverse;
        }
        .message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            flex-shrink: 0;
        }
        .message.user .message-avatar {
            background: #667eea;
        }
        .message.assistant .message-avatar {
            background: #764ba2;
        }
        .message-content {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 12px 16px;
            max-width: 70%;
        }
        .message.user .message-content {
            background: rgba(102, 126, 234, 0.2);
        }
        .proof-progress {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 16px;
            margin-top: 12px;
        }
        .progress-bar {
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            overflow: hidden;
            margin: 12px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.3s ease;
            border-radius: 3px;
        }
        .proof-result {
            background: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
            border-radius: 8px;
            padding: 16px;
            margin-top: 12px;
        }
        .input-container {
            display: flex;
            gap: 12px;
        }
        .input-field {
            flex: 1;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 12px 16px;
            color: #fff;
            font-size: 1em;
        }
        .input-field:focus {
            outline: none;
            border-color: #667eea;
            background: rgba(255, 255, 255, 0.08);
        }
        .send-button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: none;
            border-radius: 8px;
            padding: 12px 24px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        .send-button:hover {
            transform: scale(1.05);
        }
        .send-button:active {
            transform: scale(0.95);
        }
        .messages::-webkit-scrollbar {
            width: 8px;
        }
        .messages::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
        }
        .messages::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
        }
        .messages::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.3);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>zkEngine Agent Kit</h1>
            <div class="status">
                <span class="status-dot" id="status-dot"></span>
                <span id="status-text">Connecting...</span>
            </div>
        </div>
        
        <div class="main-content">
            <div class="sidebar">
                <h3>Example Proofs</h3>
                <div class="example" onclick="setExample('prove fibonacci of 10')">
                    <strong>Fibonacci</strong><br>
                    <small>Compute the 10th Fibonacci number</small>
                </div>
                <div class="example" onclick="setExample('prove factorial of 5')">
                    <strong>Factorial</strong><br>
                    <small>Calculate 5! = 120</small>
                </div>
                <div class="example" onclick="setExample('add 15 and 27')">
                    <strong>Addition</strong><br>
                    <small>Prove 15 + 27 = 42</small>
                </div>
            </div>
            
            <div class="chat-container">
                <div class="messages" id="messages">
                    <div class="message assistant">
                        <div class="message-avatar">ZK</div>
                        <div class="message-content">
                            Welcome to zkEngine! I can help you create zero-knowledge proofs.
                            <br><br>
                            Try these examples:
                            <br>• "prove fibonacci of 10"
                            <br>• "prove factorial of 5"
                            <br>• "add 15 and 27"
                        </div>
                    </div>
                </div>
                
                <div class="input-container">
                    <input 
                        type="text" 
                        class="input-field" 
                        id="user-input" 
                        placeholder="Type a proof request..."
                        onkeypress="handleKeyPress(event)"
                    >
                    <button class="send-button" onclick="sendMessage()">Send</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let ws;
        
        function connectWebSocket() {
            // Use relative WebSocket URL to work with any host
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = protocol + '//' + window.location.host + '/ws';
            
            console.log('Connecting to:', wsUrl);
            ws = new WebSocket(wsUrl);
            
            ws.onopen = () => {
                document.getElementById('status-dot').classList.add('connected');
                document.getElementById('status-text').textContent = 'Connected';
                console.log('WebSocket connected');
            };
            
            ws.onclose = () => {
                document.getElementById('status-dot').classList.remove('connected');
                document.getElementById('status-text').textContent = 'Disconnected';
                console.log('WebSocket disconnected, reconnecting in 3s...');
                setTimeout(connectWebSocket, 3000);
            };
            
            ws.onerror = (error) => {
                console.error('WebSocket error:', error);
            };
            
            ws.onmessage = (event) => {
                console.log('Received:', event.data);
                try {
                    const data = JSON.parse(event.data);
                    handleServerMessage(data);
                } catch (e) {
                    console.error('Failed to parse message:', e);
                }
            };
        }
        
        function handleServerMessage(data) {
            if (data.type === 'proof_progress') {
                updateProgress(data);
            } else if (data.type === 'proof_complete') {
                showProofResult(data);
            } else if (data.type === 'chat_response') {
                addMessage('assistant', data.message);
            } else if (data.type === 'error') {
                addMessage('assistant', 'Error: ' + data.message);
            }
        }
        
        function updateProgress(data) {
            const lastMessage = document.querySelector('.messages .message:last-child');
            if (lastMessage && lastMessage.querySelector('.proof-progress')) {
                const progressFill = lastMessage.querySelector('.progress-fill');
                if (progressFill) {
                    progressFill.style.width = data.progress + '%';
                }
            }
        }
        
        function showProofResult(data) {
            const resultHtml = `
                <div class="proof-result">
                    <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
                        <span style="font-size: 1.5em;">✅</span>
                        <strong>Proof Generated Successfully!</strong>
                    </div>
                    <div>Type: ${data.description || 'Unknown'}</div>
                    <div>Proof ID: ${data.proofId}</div>
                    <div>Time: ${data.time}s</div>
                    <div>Status: ${data.status}</div>
                </div>
            `;
            addMessage('assistant', resultHtml);
        }
        
        function sendMessage() {
            const input = document.getElementById('user-input');
            const message = input.value.trim();
            
            if (!message || ws.readyState !== WebSocket.OPEN) {
                if (ws.readyState !== WebSocket.OPEN) {
                    alert('WebSocket is not connected. Please wait...');
                }
                return;
            }
            
            addMessage('user', message);
            input.value = '';
            
            ws.send(JSON.stringify({
                message: message
            }));
            
            const progressHtml = `
                <div class="proof-progress">
                    <div>🔄 Generating proof...</div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: 0%"></div>
                    </div>
                </div>
            `;
            addMessage('assistant', progressHtml);
        }
        
        function addMessage(sender, content) {
            const messages = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message ' + sender;
            
            messageDiv.innerHTML = `
                <div class="message-avatar">${sender === 'user' ? 'U' : 'ZK'}</div>
                <div class="message-content">${content}</div>
            `;
            
            messages.appendChild(messageDiv);
            messages.scrollTop = messages.scrollHeight;
        }
        
        function setExample(text) {
            document.getElementById('user-input').value = text;
            document.getElementById('user-input').focus();
        }
        
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        // Initialize WebSocket connection
        connectWebSocket();
    </script>
</body>
</html>
